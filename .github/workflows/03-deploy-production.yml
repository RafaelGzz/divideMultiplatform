name: 🚀 Deploy to Play Store

on:
  push:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      track:
        description: 'Release track'
        required: true
        default: 'closed-test'
        type: choice
        options:
        - closed-test
        - open-test
        - production
      version_name:
        description: 'Version name (e.g., 1.0.16)'
        required: false
        default: ''
      version_code:
        description: 'Version code (e.g., 1016)'
        required: false
        default: ''

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: ☕ Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: 🔧 Setup Gradle
      uses: gradle/actions/setup-gradle@v4
        
    - name: 🔍 Validate required secrets
      run: |
        if [ -z "${{ secrets.KEYSTORE_PASSWORD }}" ] || [ -z "${{ secrets.KEYSTORE_BASE64 }}" ] || [ -z "${{ secrets.GOOGLE_SERVICES_JSON }}" ] || [ -z "${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}" ]; then
          echo "❌ ERROR: Faltan secrets requeridos para el deployment"
          echo "   KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD != '' }}"
          echo "   KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 != '' }}"
          echo "   GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON != '' }}"
          echo "   GOOGLE_PLAY_SERVICE_ACCOUNT_JSON: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON != '' }}"
          exit 1
        fi
        echo "✅ Todos los secrets requeridos están configurados"
        
    - name: 🔑 Create keystore.properties
      run: |
        echo "storeFile=divide-release-key.jks" > keystore.properties
        echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" >> keystore.properties
        echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> keystore.properties
        echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> keystore.properties
        
    - name: 🔐 Decode keystore
      run: |
        echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > divide-release-key.jks
        
    - name: 📱 Create google-services.json
      run: |
        echo "${{ secrets.GOOGLE_SERVICES_JSON }}" | base64 -d > composeApp/google-services.json
        
    - name: 📝 Update version if provided
      if: ${{ github.event.inputs.version_name != '' && github.event.inputs.version_code != '' }}
      run: |
        sed -i "s/versionCode = [0-9]*/versionCode = ${{ github.event.inputs.version_code }}/" composeApp/build.gradle.kts
        sed -i "s/versionName = \"[^\"]*\"/versionName = \"${{ github.event.inputs.version_name }}\"/" composeApp/build.gradle.kts
        
    - name: 🔑 Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: 🧪 Run tests before deployment
      run: |
        echo "Running tests before deployment..."
        ./gradlew test testDebugUnitTest --continue --stacktrace
      
    - name: 📦 Build release bundle
      run: |
        echo "Building release bundle..."
        ./gradlew bundleRelease --stacktrace
      
    - name: 🎯 Determine release track
      id: track
      run: |
        if [ "${{ github.event_name }}" == "push" ]; then
          echo "track=closed-test" >> $GITHUB_OUTPUT
        else
          echo "track=${{ github.event.inputs.track }}" >> $GITHUB_OUTPUT
        fi
        
    - name: 🚀 Upload to Play Console
      uses: r0adkll/upload-google-play@v1
      with:
        serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
        packageName: com.ragl.divide
        releaseFiles: composeApp/build/outputs/bundle/release/composeApp-release.aab
        track: ${{ steps.track.outputs.track }}
        status: completed
        
    - name: 📤 Upload bundle as artifact
      uses: actions/upload-artifact@v4
      with:
        name: release-bundle-${{ github.run_number }}
        path: composeApp/build/outputs/bundle/release/composeApp-release.aab
        retention-days: 30
        
    - name: 🎉 Deployment success notification
      if: success()
      run: |
        echo "🎉 Deployment successful!"
        echo "📦 Track: ${{ steps.track.outputs.track }}"
        echo "🔢 Run number: ${{ github.run_number }}" 